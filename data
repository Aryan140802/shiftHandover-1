<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deployment Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #0a0e27;
            background-image: 
                radial-gradient(at 20% 30%, rgba(120, 0, 255, 0.15) 0px, transparent 50%),
                radial-gradient(at 80% 70%, rgba(0, 150, 255, 0.15) 0px, transparent 50%),
                radial-gradient(at 50% 50%, rgba(255, 0, 150, 0.1) 0px, transparent 50%);
            min-height: 100vh;
            padding: 20px;
            color: #e0e0e0;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: linear-gradient(135deg, rgba(30, 30, 60, 0.95) 0%, rgba(20, 20, 40, 0.95) 100%);
            border-radius: 20px;
            padding: 35px;
            margin-bottom: 25px;
            box-shadow: 
                0 20px 60px rgba(0, 0, 0, 0.5),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        h1 {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 25px;
            font-size: 2.5em;
            font-weight: 700;
            text-shadow: 0 0 30px rgba(102, 126, 234, 0.3);
        }

        .input-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        input[type="text"] {
            flex: 1;
            min-width: 250px;
            padding: 15px 25px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            font-size: 16px;
            color: #e0e0e0;
            transition: all 0.3s;
            backdrop-filter: blur(10px);
        }

        input[type="text"]::placeholder {
            color: rgba(255, 255, 255, 0.4);
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
            background: rgba(255, 255, 255, 0.08);
            box-shadow: 
                0 0 0 3px rgba(102, 126, 234, 0.2),
                0 0 20px rgba(102, 126, 234, 0.3);
        }

        button {
            padding: 15px 35px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }

        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.5s;
        }

        button:hover::before {
            left: 100%;
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.5);
        }

        button:active {
            transform: translateY(-1px);
        }

        .table-container {
            background: linear-gradient(135deg, rgba(30, 30, 60, 0.95) 0%, rgba(20, 20, 40, 0.95) 100%);
            border-radius: 20px;
            padding: 35px;
            box-shadow: 
                0 20px 60px rgba(0, 0, 0, 0.5),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            overflow-x: auto;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .stat-card {
            flex: 1;
            min-width: 180px;
            padding: 25px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(118, 75, 162, 0.2) 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            text-align: center;
            position: relative;
            overflow: hidden;
            transition: all 0.3s;
            backdrop-filter: blur(10px);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .stat-card:hover::before {
            opacity: 1;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
            border-color: rgba(102, 126, 234, 0.5);
        }

        .stat-card h3 {
            font-size: 2.5em;
            margin-bottom: 8px;
            background: linear-gradient(135deg, #667eea 0%, #f093fb 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 700;
        }

        .stat-card p {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.95em;
            font-weight: 500;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 20px;
        }

        thead {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.3) 0%, rgba(118, 75, 162, 0.3) 100%);
            position: relative;
        }

        thead::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, transparent, #667eea, #764ba2, transparent);
        }

        th {
            padding: 18px 15px;
            text-align: left;
            font-weight: 600;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #e0e0e0;
        }

        th:first-child {
            border-top-left-radius: 12px;
        }

        th:last-child {
            border-top-right-radius: 12px;
        }

        tbody tr {
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            transition: all 0.3s;
            position: relative;
        }

        tbody tr::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 3px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            opacity: 0;
            transition: opacity 0.3s;
        }

        tbody tr:hover {
            background: rgba(102, 126, 234, 0.1);
            transform: scale(1.01);
        }

        tbody tr:hover::before {
            opacity: 1;
        }

        tbody tr:last-child {
            border-bottom: none;
        }

        td {
            padding: 18px 15px;
            color: #d0d0d0;
        }

        .service-name {
            font-weight: 600;
            color: #667eea;
            text-shadow: 0 0 10px rgba(102, 126, 234, 0.3);
        }

        .badge {
            display: inline-block;
            padding: 6px 14px;
            border-radius: 25px;
            font-size: 0.85em;
            font-weight: 600;
            backdrop-filter: blur(10px);
            border: 1px solid;
            transition: all 0.3s;
        }

        .badge:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .badge-broker {
            background: rgba(33, 150, 243, 0.2);
            color: #64b5f6;
            border-color: rgba(33, 150, 243, 0.3);
        }

        .badge-eg {
            background: rgba(156, 39, 176, 0.2);
            color: #ba68c8;
            border-color: rgba(156, 39, 176, 0.3);
        }

        .error {
            background: rgba(255, 152, 0, 0.15);
            border: 1px solid rgba(255, 152, 0, 0.3);
            padding: 20px;
            border-radius: 12px;
            color: #ffb74d;
            margin-top: 20px;
            backdrop-filter: blur(10px);
        }

        .loading {
            text-align: center;
            padding: 50px;
            font-size: 1.3em;
            color: #667eea;
        }

        .loading::after {
            content: '...';
            animation: dots 1.5s steps(4, end) infinite;
        }

        @keyframes dots {
            0%, 20% { content: '.'; }
            40% { content: '..'; }
            60%, 100% { content: '...'; }
        }

        .empty-state {
            text-align: center;
            padding: 70px 20px;
            color: rgba(255, 255, 255, 0.4);
        }

        .empty-state svg {
            width: 120px;
            height: 120px;
            margin-bottom: 25px;
            opacity: 0.3;
            filter: drop-shadow(0 0 20px rgba(102, 126, 234, 0.3));
        }

        .empty-state h2 {
            color: rgba(255, 255, 255, 0.6);
            margin-bottom: 10px;
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 10px;
            height: 10px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 5px;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 5px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #7b8ef0 0%, #8b5bb2 100%);
        }

        @media (max-width: 768px) {
            .input-group {
                flex-direction: column;
            }

            input[type="text"] {
                width: 100%;
            }

            th, td {
                padding: 12px 10px;
                font-size: 0.85em;
            }

            h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📊 Deployment Tracker</h1>
            <div class="input-group">
                <input type="text" id="ipInput" placeholder="Enter IP Address (e.g., 10.188.25.163)" value="10.188.25.163">
                <button onclick="loadDeployment()">Load Deployment</button>
            </div>
        </div>

        <div class="table-container" id="contentArea">
            <div class="empty-state">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
                </svg>
                <h2>No Data Loaded</h2>
                <p>Enter an IP address and click "Load Deployment" to view deployment data</p>
            </div>
        </div>
    </div>

    <script>
        async function loadDeployment() {
            const ip = document.getElementById('ipInput').value.trim();
            const contentArea = document.getElementById('contentArea');
            
            if (!ip) {
                contentArea.innerHTML = '<div class="error">⚠️ Please enter an IP address</div>';
                return;
            }

            contentArea.innerHTML = '<div class="loading">🔄 Loading deployment data</div>';

            try {
                const fileName = `${ip}_Deployment.json`;
                const filePath = `/home/scripts/deployment_Tracker/${fileName}`;
                
                const response = await fetch(filePath);
                
                if (!response.ok) {
                    throw new Error(`File not found: ${fileName}`);
                }
                
                const data = await response.json();
                renderTable(data);
            } catch (error) {
                contentArea.innerHTML = `
                    <div class="error">
                        <strong>❌ Error:</strong> ${error.message}
                        <br><br>
                        <small>Make sure the file exists at: /home/scripts/deployment_Tracker/${ip}_Deployment.json</small>
                    </div>
                `;
            }
        }

        function renderTable(data) {
            const contentArea = document.getElementById('contentArea');
            
            if (!data || data.length === 0) {
                contentArea.innerHTML = '<div class="error">⚠️ No deployment data found in the file</div>';
                return;
            }

            const totalDeployments = data.length;
            const uniqueBrokers = new Set(data.map(item => item.Broker)).size;
            const uniqueEGs = new Set(data.map(item => item.EG)).size;

            let html = `
                <div class="stats">
                    <div class="stat-card">
                        <h3>${totalDeployments}</h3>
                        <p>Total Deployments</p>
                    </div>
                    <div class="stat-card">
                        <h3>${uniqueBrokers}</h3>
                        <p>Unique Brokers</p>
                    </div>
                    <div class="stat-card">
                        <h3>${uniqueEGs}</h3>
                        <p>Execution Groups</p>
                    </div>
                </div>
                
                <table>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Service Name</th>
                            <th>Broker</th>
                            <th>Execution Group</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            data.forEach((item, index) => {
                html += `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${item.Date}</td>
                        <td>${item.Time}</td>
                        <td class="service-name">${item['Service Name']}</td>
                        <td><span class="badge badge-broker">${item.Broker}</span></td>
                        <td><span class="badge badge-eg">${item.EG}</span></td>
                    </tr>
                `;
            });

            html += `
                    </tbody>
                </table>
            `;

            contentArea.innerHTML = html;
        }

        document.getElementById('ipInput').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                loadDeployment();
            }
        });
    </script>
</body>
</html>
